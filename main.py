# Form implementation generated from reading ui file 'calculator.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from math import sqrt


class Ui_Calculator(object):

    def setupUi(self, Calculator):
        Calculator.setObjectName("Calculator")
        Calculator.resize(316, 557)
        Calculator.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(parent=Calculator)
        self.centralwidget.setObjectName("centralwidget")

        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, 316, 81))
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        font.setPointSize(20)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label.setFont(font)
        self.label.setMouseTracking(True)
        self.label.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label.setLocale(QtCore.QLocale(
            QtCore.QLocale.Language.English, QtCore.QLocale.Country.UnitedStates))
        self.label.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight |
                                QtCore.Qt.AlignmentFlag.AlignTrailing | QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.label.setWordWrap(False)
        self.label.setObjectName("label")

        self.pushButton_1 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_1.setGeometry(QtCore.QRect(0, 240, 75, 75))
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        font.setPointSize(26)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.pushButton_1.setFont(font)
        self.pushButton_1.setObjectName("pushButton_1")

        self.pushButton_2 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(80, 240, 75, 75))
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        font.setPointSize(26)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")

        self.pushButton_3 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(160, 240, 75, 75))
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        font.setPointSize(26)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")

        self.pushButton_4 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(0, 320, 75, 75))
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        font.setPointSize(26)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")

        self.pushButton_5 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(80, 320, 75, 75))
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        font.setPointSize(26)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setObjectName("pushButton_5")

        self.pushButton_6 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(160, 320, 75, 75))
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        font.setPointSize(26)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.pushButton_6.setFont(font)
        self.pushButton_6.setObjectName("pushButton_6")

        self.pushButton_7 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(0, 400, 75, 75))
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        font.setPointSize(26)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setObjectName("pushButton_7")

        self.pushButton_8 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(80, 400, 75, 75))
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        font.setPointSize(26)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.pushButton_8.setFont(font)
        self.pushButton_8.setObjectName("pushButton_8")

        self.pushButton_9 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_9.setGeometry(QtCore.QRect(160, 400, 75, 75))
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        font.setPointSize(26)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.pushButton_9.setFont(font)
        self.pushButton_9.setObjectName("pushButton_9")

        self.pushButton_invert_sign = QtWidgets.QPushButton(
            parent=self.centralwidget)
        self.pushButton_invert_sign.setGeometry(QtCore.QRect(0, 480, 75, 75))
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        font.setPointSize(26)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.pushButton_invert_sign.setFont(font)
        self.pushButton_invert_sign.setObjectName("pushButton_invert_sign")

        self.pushButton_0 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_0.setGeometry(QtCore.QRect(80, 480, 75, 75))
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        font.setPointSize(26)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.pushButton_0.setFont(font)
        self.pushButton_0.setObjectName("pushButton_0")

        self.pushButton_point = QtWidgets.QPushButton(
            parent=self.centralwidget)
        self.pushButton_point.setGeometry(QtCore.QRect(160, 480, 75, 75))
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        font.setPointSize(26)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.pushButton_point.setFont(font)
        self.pushButton_point.setObjectName("pushButton_point")

        self.pushButton_equals = QtWidgets.QPushButton(
            parent=self.centralwidget)
        self.pushButton_equals.setGeometry(QtCore.QRect(240, 480, 75, 75))
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        font.setPointSize(26)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.pushButton_equals.setFont(font)
        self.pushButton_equals.setStyleSheet(
            "background-color: rgb(204, 178, 229);")
        self.pushButton_equals.setObjectName("pushButton_equals")

        self.pushButton_plus = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_plus.setGeometry(QtCore.QRect(240, 400, 75, 75))
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        font.setPointSize(26)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.pushButton_plus.setFont(font)
        self.pushButton_plus.setObjectName("pushButton_plus")

        self.pushButton_minus = QtWidgets.QPushButton(
            parent=self.centralwidget)
        self.pushButton_minus.setGeometry(QtCore.QRect(240, 320, 75, 75))
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        font.setPointSize(26)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.pushButton_minus.setFont(font)
        self.pushButton_minus.setObjectName("pushButton_minus")

        self.pushButton_multiple = QtWidgets.QPushButton(
            parent=self.centralwidget)
        self.pushButton_multiple.setGeometry(QtCore.QRect(240, 240, 75, 75))
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        font.setPointSize(26)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.pushButton_multiple.setFont(font)
        self.pushButton_multiple.setObjectName("pushButton_multiple")

        self.pushButton_devision = QtWidgets.QPushButton(
            parent=self.centralwidget)
        self.pushButton_devision.setGeometry(QtCore.QRect(240, 160, 75, 75))
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        font.setPointSize(26)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.pushButton_devision.setFont(font)
        self.pushButton_devision.setObjectName("pushButton_devision")

        self.pushButton_powers = QtWidgets.QPushButton(
            parent=self.centralwidget)
        self.pushButton_powers.setGeometry(QtCore.QRect(160, 160, 75, 75))
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        font.setPointSize(26)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.pushButton_powers.setFont(font)
        self.pushButton_powers.setObjectName("pushButton_powers")

        self.pushButton_percent = QtWidgets.QPushButton(
            parent=self.centralwidget)
        self.pushButton_percent.setGeometry(QtCore.QRect(0, 160, 75, 75))
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        font.setPointSize(26)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.pushButton_percent.setFont(font)
        self.pushButton_percent.setObjectName("pushButton_percent")

        self.pushButton_square_root = QtWidgets.QPushButton(
            parent=self.centralwidget)
        self.pushButton_square_root.setGeometry(QtCore.QRect(80, 160, 75, 75))
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        font.setPointSize(26)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.pushButton_square_root.setFont(font)
        self.pushButton_square_root.setObjectName("pushButton_square_root")

        self.pushButton_clear = QtWidgets.QPushButton(
            parent=self.centralwidget)
        self.pushButton_clear.setGeometry(QtCore.QRect(0, 80, 235, 75))
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        font.setPointSize(24)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.pushButton_clear.setFont(font)
        self.pushButton_clear.setStyleSheet("font: 24pt \"Ubuntu\";")
        self.pushButton_clear.setObjectName("pushButton_clear")

        self.pushButton_backspace = QtWidgets.QPushButton(
            parent=self.centralwidget)
        self.pushButton_backspace.setGeometry(
            QtCore.QRect(240, 80, 75, 75))
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        font.setPointSize(26)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.pushButton_backspace.setFont(font)
        self.pushButton_backspace.setObjectName(
            "pushButton_backspace")

        Calculator.setCentralWidget(self.centralwidget)

        self.retranslateUi(Calculator)
        QtCore.QMetaObject.connectSlotsByName(Calculator)

    def retranslateUi(self, Calculator):
        _translate = QtCore.QCoreApplication.translate
        Calculator.setWindowTitle(_translate("Calculator", "Calculator"))

        # CREATING ALL OF THE BUTTONS FIRST
        self.label.setText(_translate("Calculator", "0"))

        # characters
        self.pushButton_0.setText(_translate("Calculator", "0"))
        self.pushButton_1.setText(_translate("Calculator", "1"))
        self.pushButton_2.setText(_translate("Calculator", "2"))
        self.pushButton_3.setText(_translate("Calculator", "3"))
        self.pushButton_4.setText(_translate("Calculator", "4"))
        self.pushButton_5.setText(_translate("Calculator", "5"))
        self.pushButton_6.setText(_translate("Calculator", "6"))
        self.pushButton_7.setText(_translate("Calculator", "7"))
        self.pushButton_8.setText(_translate("Calculator", "8"))
        self.pushButton_9.setText(_translate("Calculator", "9"))

        self.pushButton_point.setText(_translate("Calculator", "."))
        self.pushButton_plus.setText(_translate("Calculator", "+"))
        self.pushButton_minus.setText(_translate("Calculator", "-"))
        self.pushButton_multiple.setText(_translate("Calculator", "*"))
        self.pushButton_devision.setText(_translate("Calculator", "/"))

        # custom_functions
        self.pushButton_invert_sign.setText(_translate("Calculator", "±"))
        self.pushButton_equals.setText(_translate("Calculator", "="))
        self.pushButton_powers.setText(_translate("Calculator", "**"))
        self.pushButton_percent.setText(_translate("Calculator", "%"))
        self.pushButton_square_root.setText(_translate("Calculator", "√x"))
        self.pushButton_backspace.setText(_translate("Calculator", "←"))
        self.pushButton_clear.setText(_translate("Calculator", "Clear"))

        # ASSIGN THE APPROPRIATE HANDLER FUNCTION WHILE CLICKED

        # digits
        self.pushButton_0.clicked.connect(
            lambda: self.button_click_handler(button_value=self.pushButton_0.text()))
        self.pushButton_1.clicked.connect(
            lambda: self.button_click_handler(button_value=self.pushButton_1.text()))
        self.pushButton_2.clicked.connect(
            lambda: self.button_click_handler(button_value=self.pushButton_2.text()))
        self.pushButton_3.clicked.connect(
            lambda: self.button_click_handler(button_value=self.pushButton_3.text()))
        self.pushButton_4.clicked.connect(
            lambda: self.button_click_handler(button_value=self.pushButton_4.text()))
        self.pushButton_5.clicked.connect(
            lambda: self.button_click_handler(button_value=self.pushButton_5.text()))
        self.pushButton_6.clicked.connect(
            lambda: self.button_click_handler(button_value=self.pushButton_6.text()))
        self.pushButton_7.clicked.connect(
            lambda: self.button_click_handler(button_value=self.pushButton_7.text()))
        self.pushButton_8.clicked.connect(
            lambda: self.button_click_handler(button_value=self.pushButton_8.text()))
        self.pushButton_9.clicked.connect(
            lambda: self.button_click_handler(button_value=self.pushButton_9.text()))

        # operations
        self.pushButton_point.clicked.connect(
            lambda: self.button_click_handler(button_value=self.pushButton_point.text()))
        self.pushButton_plus.clicked.connect(
            lambda: self.button_click_handler(button_value=self.pushButton_plus.text()))
        self.pushButton_minus.clicked.connect(
            lambda: self.button_click_handler(button_value=self.pushButton_minus.text()))
        self.pushButton_multiple.clicked.connect(
            lambda: self.button_click_handler(button_value=self.pushButton_multiple.text()))
        self.pushButton_powers.clicked.connect(
            lambda: self.button_click_handler(button_value=self.pushButton_powers.text()))
        self.pushButton_devision.clicked.connect(
            lambda: self.button_click_handler(button_value=self.pushButton_devision.text()))

        # custom_functions
        self.pushButton_invert_sign.clicked.connect(
            lambda: self.button_click_handler(button_value=self.pushButton_invert_sign.text()))
        self.pushButton_percent.clicked.connect(
            lambda: self.button_click_handler(button_value=self.pushButton_percent.text()))
        self.pushButton_square_root.clicked.connect(
            lambda: self.button_click_handler(button_value=self.pushButton_square_root.text()))
        self.pushButton_equals.clicked.connect(
            lambda: self.button_click_handler(button_value=self.pushButton_equals.text()))
        self.pushButton_backspace.clicked.connect(
            lambda: self.button_click_handler(button_value=self.pushButton_backspace.text()))

        self.pushButton_clear.clicked.connect(lambda: self.label.setText('0'))

    def button_click_handler(self, button_value: str) -> None:
        """Handle every button click, do some validation and call functions corresponded to each button/button group"""
        self.operations = ('+', '-', '*', '/', '**')
        current_label_text = self.label.text()

        if button_value.isdigit():
            self.digit_input(
                label_text=current_label_text, button_value=button_value)
        elif button_value in self.operations:
            self.operation_input(
                label_text=current_label_text, button_value=button_value)
        elif button_value == '.':
            self.point_input(
                label_text=current_label_text, button_value=button_value)
        elif button_value == '=':
            self.calculate(label_text=current_label_text)
        elif button_value == '←':
            self.backspace(label_text=current_label_text)
        else:
            self.custom_functions(
                label_text=current_label_text, button_value=button_value)

    def digit_input(self, label_text: str, button_value: str) -> None:
        """An integer will be addet to label text depending on conditions:
            if label text is default zero OR button '=' was previous clicked  - text will be rewriten
            normally every integer will be added to existing text"""
        if label_text != '0':
            if self.after_calculate:
                update = button_value
                self.after_calculate = False
            else:
                update = f'{label_text}{button_value}'
        else:
            update = button_value
            self.after_calculate = False
        self.label.setText(update)

    def operation_input(self, label_text: str, button_value: str) -> None:
        """Operations will be displayed only if it is preceded by a number
            no more than one operations are available to add in a row"""
        self.after_calculate = False
        if not label_text.strip().endswith((*self.operations, '.')):
            update = label_text + f' {button_value} '
        else:
            update = label_text

        self.label.setText(update)

    def point_input(self, label_text: str, button_value: str) -> None:
        """It is possible to add just one point to one number,
            impossible to write 2 or more points in a row"""
        self.after_calculate = False
        if not label_text.strip().endswith((*self.operations, '.')):
            update = label_text + button_value
        else:
            update = label_text

        if not '.' in label_text.strip().split()[-1]:
            self.label.setText(update)

    def calculate(self, label_text: str) -> None:
        """Label text will be calculated via 'eval' function, and rewritten
            with calculating result, 
            result is limited by 6 characters after coma
            after displaying result, calling any 'digit_input' will rewrite label text
            call any other button click function will continue operations with result"""
        try:
            result = eval(label_text) 
            update = str(round(result, 6))
            self.label.setText(update)
            self.after_calculate = True
        except SyntaxError:
            pass
        except ZeroDivisionError:
            self.label.setText('0')

    def backspace(self, label_text: str) -> None:
        """Erases the last character from right side
            if last remaining character was deleted, default zero will be displayed"""
        self.after_calculate = False
        if len(label_text) == 1:
            update = '0'
        else:
            if label_text.strip().endswith(self.operations):
                update = label_text[:-3]
            else:
                update = label_text[:-1]
        self.label.setText(update)

    def custom_functions(self, label_text: str, button_value: str) -> None:
        """Calls one of available custom functions, 
            changes only latest number in label text"""
        self.after_calculate = False
        label_list = label_text.strip().split()
        last_number = label_list[-1]        
        possible_custom_functions = {
            '±': lambda x: x * -1,
            '%': lambda x: x / 100,
            '√x': lambda x: sqrt(x), }

        try:
            res = possible_custom_functions.get(button_value)(float(last_number))                
            label_list[-1] = str(round(res, 6))
            update = ' '.join(label_list)
            self.label.setText(update)

        except ValueError:
            pass


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Calculator = QtWidgets.QMainWindow()
    ui = Ui_Calculator()
    ui.setupUi(Calculator)
    Calculator.show()
    sys.exit(app.exec())
